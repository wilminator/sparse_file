name: Quality

on: [push, pull_request]

env:
  cache_name: cache-coverage-report

jobs:
  quality:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python: ["3.8", "3.9", "3.10", "3.11"]

    # Set up operating system
    runs-on: ${{ matrix.os }}

    # Set the default shell to bash (for Windows)
    defaults:
      run:
        shell: bash

    # Define job steps
    steps:
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python }}

      - name: Check-out repository
        uses: actions/checkout@v3

      - name: Install poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Install dependencies
        run: poetry install --no-interaction --no-root

      - name: Install library
        run: poetry install --no-interaction

      - name: Test with pytest
        run: poetry run pytest --cov=sparse_file --cov-report=xml tests/

      - name: Use Codecov to track coverage
        uses: codecov/codecov-action@v3
        with:
          files: ./coverage.xml   # coverage report
          fail_ci_if_error: true # optional (default = false)
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

      - name: Build documentation
        run: poetry run make html --directory docs/
        if: ${{ matrix.python != '3.8' }} 

  release:
    # Set up operating system
    runs-on: ubuntu-latest

    # Only run if the quality check succeeded
    needs: quality

    # Define environment
    environment: release

    # IMPORTANT: this permission is mandatory for trusted publishing
    permissions:      
      id-token: write
      contents: write

    # Only if this is a push to main without a tag. The tag being pushed will create a new workflow trigger.
    if: github.event_name == 'push' && !startsWith(github.ref, 'refs/tags') && github.event.base_ref == 'refs/heads/main'

    # Define job steps
    steps:
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Check-out repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Install poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Install package
        run: poetry install

      - name: Use Python Semantic Release to prepare release
        env:
          # This token is created automatically by GH Actions
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
            git config user.name github-actions
            git config user.email github-actions@github.com
            poetry run semantic-release version
            poetry run semantic-release publish

      - name: Publish to TestPyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository_url: https://test.pypi.org/legacy/

      - name: Test install from TestPyPI
        run: |
            pip install \
            --index-url https://test.pypi.org/simple/ \
            --extra-index-url https://pypi.org/simple \
            sparse-file

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
